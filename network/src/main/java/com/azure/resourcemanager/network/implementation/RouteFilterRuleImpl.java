// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.implementation;

import com.azure.resourcemanager.network.fluent.models.RouteFilterRuleInner;
import com.azure.resourcemanager.network.models.Access;
import com.azure.resourcemanager.network.models.ProvisioningState;
import com.azure.resourcemanager.network.models.RouteFilterRule;
import com.azure.resourcemanager.network.models.RouteFilterRuleType;
import java.util.Collections;
import java.util.List;

public final class RouteFilterRuleImpl implements RouteFilterRule {
    private RouteFilterRuleInner innerObject;

    private final com.azure.resourcemanager.network.NetworkManager serviceManager;

    RouteFilterRuleImpl(
        RouteFilterRuleInner innerObject, com.azure.resourcemanager.network.NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String location() {
        return this.innerModel().location();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public Access access() {
        return this.innerModel().access();
    }

    public RouteFilterRuleType routeFilterRuleType() {
        return this.innerModel().routeFilterRuleType();
    }

    public List<String> communities() {
        List<String> inner = this.innerModel().communities();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public RouteFilterRuleInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.network.NetworkManager manager() {
        return this.serviceManager;
    }
}
