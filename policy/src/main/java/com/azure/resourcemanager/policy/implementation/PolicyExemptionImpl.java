// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policy.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.policy.fluent.models.PolicyExemptionInner;
import com.azure.resourcemanager.policy.models.ExemptionCategory;
import com.azure.resourcemanager.policy.models.PolicyExemption;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;

public final class PolicyExemptionImpl implements PolicyExemption, PolicyExemption.Definition, PolicyExemption.Update {
    private PolicyExemptionInner innerObject;

    private final com.azure.resourcemanager.policy.PolicyManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String policyAssignmentId() {
        return this.innerModel().policyAssignmentId();
    }

    public List<String> policyDefinitionReferenceIds() {
        List<String> inner = this.innerModel().policyDefinitionReferenceIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ExemptionCategory exemptionCategory() {
        return this.innerModel().exemptionCategory();
    }

    public OffsetDateTime expiresOn() {
        return this.innerModel().expiresOn();
    }

    public String displayName() {
        return this.innerModel().displayName();
    }

    public String description() {
        return this.innerModel().description();
    }

    public Object metadata() {
        return this.innerModel().metadata();
    }

    public PolicyExemptionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.policy.PolicyManager manager() {
        return this.serviceManager;
    }

    private String scope;

    private String policyExemptionName;

    public PolicyExemptionImpl withExistingScope(String scope) {
        this.scope = scope;
        return this;
    }

    public PolicyExemption create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPolicyExemptions()
                .createOrUpdateWithResponse(scope, policyExemptionName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public PolicyExemption create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPolicyExemptions()
                .createOrUpdateWithResponse(scope, policyExemptionName, this.innerModel(), context)
                .getValue();
        return this;
    }

    PolicyExemptionImpl(String name, com.azure.resourcemanager.policy.PolicyManager serviceManager) {
        this.innerObject = new PolicyExemptionInner();
        this.serviceManager = serviceManager;
        this.policyExemptionName = name;
    }

    public PolicyExemptionImpl update() {
        return this;
    }

    public PolicyExemption apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPolicyExemptions()
                .createOrUpdateWithResponse(scope, policyExemptionName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public PolicyExemption apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPolicyExemptions()
                .createOrUpdateWithResponse(scope, policyExemptionName, this.innerModel(), context)
                .getValue();
        return this;
    }

    PolicyExemptionImpl(
        PolicyExemptionInner innerObject, com.azure.resourcemanager.policy.PolicyManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.scope =
            Utils
                .getValueFromIdByParameterName(
                    innerObject.id(),
                    "/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}",
                    "scope");
        this.policyExemptionName =
            Utils
                .getValueFromIdByParameterName(
                    innerObject.id(),
                    "/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}",
                    "policyExemptionName");
    }

    public PolicyExemption refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPolicyExemptions()
                .getWithResponse(scope, policyExemptionName, Context.NONE)
                .getValue();
        return this;
    }

    public PolicyExemption refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPolicyExemptions()
                .getWithResponse(scope, policyExemptionName, context)
                .getValue();
        return this;
    }

    public PolicyExemptionImpl withPolicyAssignmentId(String policyAssignmentId) {
        this.innerModel().withPolicyAssignmentId(policyAssignmentId);
        return this;
    }

    public PolicyExemptionImpl withExemptionCategory(ExemptionCategory exemptionCategory) {
        this.innerModel().withExemptionCategory(exemptionCategory);
        return this;
    }

    public PolicyExemptionImpl withPolicyDefinitionReferenceIds(List<String> policyDefinitionReferenceIds) {
        this.innerModel().withPolicyDefinitionReferenceIds(policyDefinitionReferenceIds);
        return this;
    }

    public PolicyExemptionImpl withExpiresOn(OffsetDateTime expiresOn) {
        this.innerModel().withExpiresOn(expiresOn);
        return this;
    }

    public PolicyExemptionImpl withDisplayName(String displayName) {
        this.innerModel().withDisplayName(displayName);
        return this;
    }

    public PolicyExemptionImpl withDescription(String description) {
        this.innerModel().withDescription(description);
        return this;
    }

    public PolicyExemptionImpl withMetadata(Object metadata) {
        this.innerModel().withMetadata(metadata);
        return this;
    }
}
