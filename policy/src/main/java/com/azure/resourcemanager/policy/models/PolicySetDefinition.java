// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policy.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.policy.fluent.models.PolicySetDefinitionInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of PolicySetDefinition. */
public interface PolicySetDefinition {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the policyType property: The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom,
     * and Static.
     *
     * @return the policyType value.
     */
    PolicyType policyType();

    /**
     * Gets the displayName property: The display name of the policy set definition.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the description property: The policy set definition description.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the metadata property: The policy set definition metadata. Metadata is an open ended object and is typically
     * a collection of key value pairs.
     *
     * @return the metadata value.
     */
    Object metadata();

    /**
     * Gets the parameters property: The policy set definition parameters that can be used in policy definition
     * references.
     *
     * @return the parameters value.
     */
    Map<String, ParameterDefinitionsValue> parameters();

    /**
     * Gets the policyDefinitions property: An array of policy definition references.
     *
     * @return the policyDefinitions value.
     */
    List<PolicyDefinitionReference> policyDefinitions();

    /**
     * Gets the policyDefinitionGroups property: The metadata describing groups of policy definition references within
     * the policy set definition.
     *
     * @return the policyDefinitionGroups value.
     */
    List<PolicyDefinitionGroup> policyDefinitionGroups();

    /**
     * Gets the inner com.azure.resourcemanager.policy.fluent.models.PolicySetDefinitionInner object.
     *
     * @return the inner object.
     */
    PolicySetDefinitionInner innerModel();

    /** The entirety of the PolicySetDefinition definition. */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithCreate {
    }
    /** The PolicySetDefinition definition stages. */
    interface DefinitionStages {
        /** The first stage of the PolicySetDefinition definition. */
        interface Blank extends WithCreate {
        }
        /**
         * The stage of the PolicySetDefinition definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithPolicyType,
                DefinitionStages.WithDisplayName,
                DefinitionStages.WithDescription,
                DefinitionStages.WithMetadata,
                DefinitionStages.WithParameters,
                DefinitionStages.WithPolicyDefinitions,
                DefinitionStages.WithPolicyDefinitionGroups {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PolicySetDefinition create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PolicySetDefinition create(Context context);
        }
        /** The stage of the PolicySetDefinition definition allowing to specify policyType. */
        interface WithPolicyType {
            /**
             * Specifies the policyType property: The type of policy definition. Possible values are NotSpecified,
             * BuiltIn, Custom, and Static..
             *
             * @param policyType The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and
             *     Static.
             * @return the next definition stage.
             */
            WithCreate withPolicyType(PolicyType policyType);
        }
        /** The stage of the PolicySetDefinition definition allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The display name of the policy set definition..
             *
             * @param displayName The display name of the policy set definition.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }
        /** The stage of the PolicySetDefinition definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The policy set definition description..
             *
             * @param description The policy set definition description.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the PolicySetDefinition definition allowing to specify metadata. */
        interface WithMetadata {
            /**
             * Specifies the metadata property: The policy set definition metadata. Metadata is an open ended object and
             * is typically a collection of key value pairs..
             *
             * @param metadata The policy set definition metadata. Metadata is an open ended object and is typically a
             *     collection of key value pairs.
             * @return the next definition stage.
             */
            WithCreate withMetadata(Object metadata);
        }
        /** The stage of the PolicySetDefinition definition allowing to specify parameters. */
        interface WithParameters {
            /**
             * Specifies the parameters property: The policy set definition parameters that can be used in policy
             * definition references..
             *
             * @param parameters The policy set definition parameters that can be used in policy definition references.
             * @return the next definition stage.
             */
            WithCreate withParameters(Map<String, ParameterDefinitionsValue> parameters);
        }
        /** The stage of the PolicySetDefinition definition allowing to specify policyDefinitions. */
        interface WithPolicyDefinitions {
            /**
             * Specifies the policyDefinitions property: An array of policy definition references..
             *
             * @param policyDefinitions An array of policy definition references.
             * @return the next definition stage.
             */
            WithCreate withPolicyDefinitions(List<PolicyDefinitionReference> policyDefinitions);
        }
        /** The stage of the PolicySetDefinition definition allowing to specify policyDefinitionGroups. */
        interface WithPolicyDefinitionGroups {
            /**
             * Specifies the policyDefinitionGroups property: The metadata describing groups of policy definition
             * references within the policy set definition..
             *
             * @param policyDefinitionGroups The metadata describing groups of policy definition references within the
             *     policy set definition.
             * @return the next definition stage.
             */
            WithCreate withPolicyDefinitionGroups(List<PolicyDefinitionGroup> policyDefinitionGroups);
        }
    }
    /**
     * Begins update for the PolicySetDefinition resource.
     *
     * @return the stage of resource update.
     */
    PolicySetDefinition.Update update();

    /** The template for PolicySetDefinition update. */
    interface Update
        extends UpdateStages.WithPolicyType,
            UpdateStages.WithDisplayName,
            UpdateStages.WithDescription,
            UpdateStages.WithMetadata,
            UpdateStages.WithParameters,
            UpdateStages.WithPolicyDefinitions,
            UpdateStages.WithPolicyDefinitionGroups {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        PolicySetDefinition apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        PolicySetDefinition apply(Context context);
    }
    /** The PolicySetDefinition update stages. */
    interface UpdateStages {
        /** The stage of the PolicySetDefinition update allowing to specify policyType. */
        interface WithPolicyType {
            /**
             * Specifies the policyType property: The type of policy definition. Possible values are NotSpecified,
             * BuiltIn, Custom, and Static..
             *
             * @param policyType The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and
             *     Static.
             * @return the next definition stage.
             */
            Update withPolicyType(PolicyType policyType);
        }
        /** The stage of the PolicySetDefinition update allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The display name of the policy set definition..
             *
             * @param displayName The display name of the policy set definition.
             * @return the next definition stage.
             */
            Update withDisplayName(String displayName);
        }
        /** The stage of the PolicySetDefinition update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The policy set definition description..
             *
             * @param description The policy set definition description.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }
        /** The stage of the PolicySetDefinition update allowing to specify metadata. */
        interface WithMetadata {
            /**
             * Specifies the metadata property: The policy set definition metadata. Metadata is an open ended object and
             * is typically a collection of key value pairs..
             *
             * @param metadata The policy set definition metadata. Metadata is an open ended object and is typically a
             *     collection of key value pairs.
             * @return the next definition stage.
             */
            Update withMetadata(Object metadata);
        }
        /** The stage of the PolicySetDefinition update allowing to specify parameters. */
        interface WithParameters {
            /**
             * Specifies the parameters property: The policy set definition parameters that can be used in policy
             * definition references..
             *
             * @param parameters The policy set definition parameters that can be used in policy definition references.
             * @return the next definition stage.
             */
            Update withParameters(Map<String, ParameterDefinitionsValue> parameters);
        }
        /** The stage of the PolicySetDefinition update allowing to specify policyDefinitions. */
        interface WithPolicyDefinitions {
            /**
             * Specifies the policyDefinitions property: An array of policy definition references..
             *
             * @param policyDefinitions An array of policy definition references.
             * @return the next definition stage.
             */
            Update withPolicyDefinitions(List<PolicyDefinitionReference> policyDefinitions);
        }
        /** The stage of the PolicySetDefinition update allowing to specify policyDefinitionGroups. */
        interface WithPolicyDefinitionGroups {
            /**
             * Specifies the policyDefinitionGroups property: The metadata describing groups of policy definition
             * references within the policy set definition..
             *
             * @param policyDefinitionGroups The metadata describing groups of policy definition references within the
             *     policy set definition.
             * @return the next definition stage.
             */
            Update withPolicyDefinitionGroups(List<PolicyDefinitionGroup> policyDefinitionGroups);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    PolicySetDefinition refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    PolicySetDefinition refresh(Context context);
}
