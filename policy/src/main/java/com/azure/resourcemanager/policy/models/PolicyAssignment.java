// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policy.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.policy.fluent.models.PolicyAssignmentInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of PolicyAssignment. */
public interface PolicyAssignment {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The location of the policy assignment. Only required when utilizing managed identity.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the identity property: The managed identity associated with the policy assignment.
     *
     * @return the identity value.
     */
    Identity identity();

    /**
     * Gets the displayName property: The display name of the policy assignment.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the policyDefinitionId property: The ID of the policy definition or policy set definition being assigned.
     *
     * @return the policyDefinitionId value.
     */
    String policyDefinitionId();

    /**
     * Gets the scope property: The scope for the policy assignment.
     *
     * @return the scope value.
     */
    String scope();

    /**
     * Gets the notScopes property: The policy's excluded scopes.
     *
     * @return the notScopes value.
     */
    List<String> notScopes();

    /**
     * Gets the parameters property: The parameter values for the assigned policy rule. The keys are the parameter
     * names.
     *
     * @return the parameters value.
     */
    Map<String, ParameterValuesValue> parameters();

    /**
     * Gets the description property: This message will be part of response in case of policy violation.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the metadata property: The policy assignment metadata. Metadata is an open ended object and is typically a
     * collection of key value pairs.
     *
     * @return the metadata value.
     */
    Object metadata();

    /**
     * Gets the enforcementMode property: The policy assignment enforcement mode. Possible values are Default and
     * DoNotEnforce.
     *
     * @return the enforcementMode value.
     */
    EnforcementMode enforcementMode();

    /**
     * Gets the nonComplianceMessages property: The messages that describe why a resource is non-compliant with the
     * policy.
     *
     * @return the nonComplianceMessages value.
     */
    List<NonComplianceMessage> nonComplianceMessages();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.policy.fluent.models.PolicyAssignmentInner object.
     *
     * @return the inner object.
     */
    PolicyAssignmentInner innerModel();

    /** The entirety of the PolicyAssignment definition. */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope, DefinitionStages.WithCreate {
    }
    /** The PolicyAssignment definition stages. */
    interface DefinitionStages {
        /** The first stage of the PolicyAssignment definition. */
        interface Blank extends WithScope {
        }
        /** The stage of the PolicyAssignment definition allowing to specify parent resource. */
        interface WithScope {
            /**
             * Specifies scope.
             *
             * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
             *     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
             *     '/subscriptions/{subscriptionId}'), resource group (format:
             *     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
             *     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
             * @return the next definition stage.
             */
            WithCreate withExistingScope(String scope);
        }
        /**
         * The stage of the PolicyAssignment definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithDisplayName,
                DefinitionStages.WithPolicyDefinitionId,
                DefinitionStages.WithNotScopes,
                DefinitionStages.WithParameters,
                DefinitionStages.WithDescription,
                DefinitionStages.WithMetadata,
                DefinitionStages.WithEnforcementMode,
                DefinitionStages.WithNonComplianceMessages {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PolicyAssignment create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PolicyAssignment create(Context context);
        }
        /** The stage of the PolicyAssignment definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The location of the policy assignment. Only required when utilizing managed identity.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The location of the policy assignment. Only required when utilizing managed identity.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }
        /** The stage of the PolicyAssignment definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed identity associated with the policy assignment..
             *
             * @param identity The managed identity associated with the policy assignment.
             * @return the next definition stage.
             */
            WithCreate withIdentity(Identity identity);
        }
        /** The stage of the PolicyAssignment definition allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The display name of the policy assignment..
             *
             * @param displayName The display name of the policy assignment.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }
        /** The stage of the PolicyAssignment definition allowing to specify policyDefinitionId. */
        interface WithPolicyDefinitionId {
            /**
             * Specifies the policyDefinitionId property: The ID of the policy definition or policy set definition being
             * assigned..
             *
             * @param policyDefinitionId The ID of the policy definition or policy set definition being assigned.
             * @return the next definition stage.
             */
            WithCreate withPolicyDefinitionId(String policyDefinitionId);
        }
        /** The stage of the PolicyAssignment definition allowing to specify notScopes. */
        interface WithNotScopes {
            /**
             * Specifies the notScopes property: The policy's excluded scopes..
             *
             * @param notScopes The policy's excluded scopes.
             * @return the next definition stage.
             */
            WithCreate withNotScopes(List<String> notScopes);
        }
        /** The stage of the PolicyAssignment definition allowing to specify parameters. */
        interface WithParameters {
            /**
             * Specifies the parameters property: The parameter values for the assigned policy rule. The keys are the
             * parameter names..
             *
             * @param parameters The parameter values for the assigned policy rule. The keys are the parameter names.
             * @return the next definition stage.
             */
            WithCreate withParameters(Map<String, ParameterValuesValue> parameters);
        }
        /** The stage of the PolicyAssignment definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: This message will be part of response in case of policy violation..
             *
             * @param description This message will be part of response in case of policy violation.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the PolicyAssignment definition allowing to specify metadata. */
        interface WithMetadata {
            /**
             * Specifies the metadata property: The policy assignment metadata. Metadata is an open ended object and is
             * typically a collection of key value pairs..
             *
             * @param metadata The policy assignment metadata. Metadata is an open ended object and is typically a
             *     collection of key value pairs.
             * @return the next definition stage.
             */
            WithCreate withMetadata(Object metadata);
        }
        /** The stage of the PolicyAssignment definition allowing to specify enforcementMode. */
        interface WithEnforcementMode {
            /**
             * Specifies the enforcementMode property: The policy assignment enforcement mode. Possible values are
             * Default and DoNotEnforce..
             *
             * @param enforcementMode The policy assignment enforcement mode. Possible values are Default and
             *     DoNotEnforce.
             * @return the next definition stage.
             */
            WithCreate withEnforcementMode(EnforcementMode enforcementMode);
        }
        /** The stage of the PolicyAssignment definition allowing to specify nonComplianceMessages. */
        interface WithNonComplianceMessages {
            /**
             * Specifies the nonComplianceMessages property: The messages that describe why a resource is non-compliant
             * with the policy..
             *
             * @param nonComplianceMessages The messages that describe why a resource is non-compliant with the policy.
             * @return the next definition stage.
             */
            WithCreate withNonComplianceMessages(List<NonComplianceMessage> nonComplianceMessages);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    PolicyAssignment refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    PolicyAssignment refresh(Context context);
}
